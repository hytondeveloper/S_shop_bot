import asyncio
import logging
import os
import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from DataBase import Data_base_users, Data_base_models, Newsletter
from DataBase.private import Token, Admins, Abs_path
from Functions import Check_dir


bot_token = Token.BOT_TOKEN # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=bot_token)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

abs_path = Abs_path.abs_path # –ü—É—Ç—å –∫ –ø–∞–ø–∫–∞–º, –≥–¥–µ –ª–µ–∂–∞—Ç —Ñ–æ—Ç–æ
abs_path_database_data = Abs_path.abs_path_database_data # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–æ–¥–µ–ª–µ–π –∫—Ä–æ—Å—Å–æ–≤–æ–∫

logging.basicConfig(level=logging.INFO) # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

########################################################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
class YourStateMachine(StatesGroup):
    waiting_for_message = State() # –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
    awaiting_promo_code = State() # –ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
    waiting_for_manager_message = State() # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
    waiting_for_message_newsletter = State() # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –ë–î

########################################################################################################################
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# async def reset_state(state: FSMContext):
#     await state.finish()


########################################################################################################################
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–≤–∞–µ–º–∞—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /start –∏–ª–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
async def create_keyboard():
    keyboard = types.InlineKeyboardMarkup()

    buttons_one = [
        types.InlineKeyboardButton(text='üè∑Ô∏è–ø—Ä–æ–º–æ–∫–æ–¥üè∑Ô∏è', callback_data='promo'),
        types.InlineKeyboardButton(text='üßë‚Äçüíª–ú–ï–ù–ï–î–ñ–ï–†üßë‚Äçüíª', callback_data='manager')
    ]
    buttons_two = [
        types.InlineKeyboardButton(text='üìù–æ—Ç–∑—ã–≤—ãüìù', callback_data='reviews'),
        types.InlineKeyboardButton(text='üì¢–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüì¢', callback_data='info')
    ]

    button_catalog = types.InlineKeyboardButton(text='üõí üõí KATA–õO–ì üõí üõí', callback_data='catalog')

    keyboard.add(*buttons_one)
    keyboard.add(*buttons_two)
    keyboard.add(button_catalog)
    return keyboard

########################################################################################################################
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    print(message.from_user.id)
    user_name = message.from_user.username
    current_date = datetime.date.today()

    #
    status = await Data_base_users.DB_add_user(abs_path_database_data, message.from_user.id, current_date, user_name)
    if status == True:
        keyboard = await create_keyboard()
        if message.from_user.id == Admins.admin_id:
            # –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
            admin_keyboard = types.InlineKeyboardMarkup()
            refresh_button = types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üîß –ë–î', callback_data='admin_panel')
            newsletter_button = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ë–î', callback_data='newsletter')
            admin_keyboard.add(refresh_button, newsletter_button)
            keyboard.add(refresh_button, newsletter_button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ

        await message.answer(f'*{message.from_user.first_name}*  ü§ù  üè™'
                             f'\nüßîüèΩ‚Äç‚ôÇÔ∏èüí¨'
                             f'\n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å B–∞—Å –≤ –Ω–∞—à–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –º–∏—Ä–µ –º–æ–¥—ã –∏ —Å—Ç–∏–ª—è, –≥–¥–µ –í—ã —Å–º–æ–∂–µ—Ç–µ'
                             f' –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –æ–±—É–≤–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å.'
                             f'\n             üëâ *–î–ª—è* üëà'
                             f'\n*–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞*'
                             f'\n   üëá      *–Ω–∞–∂–º–∏—Ç–µ –Ω–∞*     üëá'
                             f'\n   üõí üõí *KATA–õO–ì* üõí üõí'
                             f'\n'
                             f'\n–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π‚Ü©Ô∏è'
                             f'\nüßë‚Äçüíª*–ú–ï–ù–ï–î–ñ–ï–†*üßë‚Äçüíª', reply_markup=keyboard, parse_mode='Markdown')
    # print(message.from_user.id)
    else:
        await message.answer(f'üëª')


########################################################################################################################
# # # # # # # # # # # # # # # # # # # # # # # # # # –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ # # # # # # # # # # # # # # # # # # # # # # # # # # # #
########################################################################################################################
# –ö–Ω–æ–ø–∫–∞ '–û–±–Ω–æ–≤–∏—Ç—å üîß –ë–î'
@dp.callback_query_handler(lambda query: query.data == 'admin_panel')
async def admin_panel_button(query: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    await query.answer('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

    global abs_path_database_data # –ü—É—Ç—å –∫ –ë–î –æ–±—É–≤–∏
    all_models_in_bd = await Data_base_models.get_all_models(abs_path_database_data)  # –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –ë–î
    # print(f'–±—ã–ª–æ (–Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –ë–î)={all_models_in_bd}')

    global abs_path # –ü—É—Ç—å –∫ –ø–∞–ø–∫–∞–º —Å —Ñ–æ—Ç–æ
    all_models_in_dir = await Check_dir.get_folders_with_photos(abs_path) # –í—Å—ë –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö

    # –£–¥–∞–ª–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ all_models_in_bd(–±–∞–∑–∞–¥–∞–Ω–Ω—ã—Ö), –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ all_models_in_dir(—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)
    all_models_in_bd = [item for item in all_models_in_bd if item in all_models_in_dir]
    # –î–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ all_models_in_dir(—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏), –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ all_models_in_bd(–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
    all_models_in_bd.extend(item for item in all_models_in_dir if item not in all_models_in_bd)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    text_for_unswer = await Data_base_models.add_models_to_db(abs_path_database_data, all_models_in_bd)

    # # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
    # await query.message.edit_reply_markup(reply_markup=None)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

    keyboard = await create_keyboard()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    await query.message.answer(text_for_unswer, reply_markup=keyboard)


########################################################################################################################
# –ö–Ω–æ–ø–∫–∞ '–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ë–î'
@dp.callback_query_handler(lambda query: query.data == 'newsletter')
async def newsletter_button(query: types.CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É '–æ—Ç–º–µ–Ω–∏—Ç—å'
    cancel_keyboard = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    cancel_keyboard.add(cancel_button)

    await bot.send_message(query.from_user.id, f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
                                               "\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å'.",
                           parse_mode='Markdown',
                           reply_markup=cancel_keyboard)
    # messege_id_for_delete = query.message.message_id
    # chat_id_for_delete = query.message.chat.id
    # print(query.message.message_id)
    # print(cancel_button.callback_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(
        message_id_for_delete=query.message.message_id,
        chat_id_for_delete=query.message.chat.id
    )
    await YourStateMachine.waiting_for_message_newsletter.set()


@dp.message_handler(state=YourStateMachine.waiting_for_message_newsletter)
async def process_manager_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = message.text

    global abs_path_database_data
    await Newsletter.send_newsletter_to_all_users(abs_path_database_data, message.text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    state_data = await state.get_data()
    # message_id_for_delete = state_data.get('message_id_for_delete')
    # chat_id_for_delete = state_data.get('chat_id_for_delete')
    # print(message_id_for_delete, chat_id_for_delete)
    # # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # await bot.delete_message(chat_id=chat_id_for_delete, message_id=message_id_for_delete)

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    await state.finish()


########################################################################################################################
########################################################################################################################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫–∞–∑–∞—Ç—å'
@dp.callback_query_handler(lambda query: query.data == 'order')
async def handle_order_button(query: types.CallbackQuery, state: FSMContext):
    # print(query.from_user)
    # user_id = query.from_user.id
    # user_name = query.from_user.username

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
    await query.message.edit_reply_markup(reply_markup=None)

    user_choice_model = query.message.caption
    await state.update_data(user_choice_model=user_choice_model)
    # –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É '–æ—Ç–º–µ–Ω–∏—Ç—å'
    cancel_keyboard = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    cancel_keyboard.add(cancel_button)

    # print('user_id =', user_id, '\nuser_name = ', user_name, '\n–ø–æ–¥–ø–∏—Å—å —Ñ–æ—Ç–∫–∏ =', user_choice_model)

    await bot.send_message(query.from_user.id, f"{query.from_user.first_name} ‚û°Ô∏è –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:"
                                               f"\n\n*1)*ü¶∂K–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –≤–∞–º –Ω—É–∂–µ–Ω*?*"
                                               f"\n\n*2)*üöö–ö–∞–∫–æ–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∏–∫–∏*?*"
                                               f"\nüì¶–ï–≤—Ä–æ–ø–æ—á—Ç–∞:"
                                               "\n   üìå–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è –µ–≤—Ä–æ–ø–æ—á—Ç—ã‚ÜôÔ∏è"
                                               "\n                  _–ò–õ–ò_"
                                               "\nüìØ–ë–µ–ª–ø–æ—á—Ç–∞:"
                                               "\n   üìå–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ c –ø–æ—á—Ç–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º‚ÜôÔ∏è"
                                               "\n                  _–ò–õ–ò_"
                                               "\nüö∂üèº–°–∞–º–æ–≤—ã–≤–æ–∑"
                                               "\n\n*3)* üë§ –§–ò–û"
                                               "\n\n*4)* üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                                               "\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å'.",
                           parse_mode='Markdown',
                           reply_markup=cancel_keyboard)

    await YourStateMachine.waiting_for_message.set()


@dp.message_handler(state=YourStateMachine.waiting_for_message)
async def process_order_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = message.text
        user_choice_model = data['user_choice_model']

    admin_id = Admins.admin_id
    admin_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚û°Ô∏è `{message.from_user.username}` \nID:(*{message.from_user.id}*)\n*{message.from_user.first_name} {message.from_user.last_name}*\n" \
                    f"–•–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å :\n{user_choice_model}\n\n{message.text}\n\nüü©üü©üü©üü©üü©üü©üü©üü©üü©üü©"

    await bot.send_message(admin_id, admin_message, parse_mode='Markdown')
    await state.finish()

    keyboard = await create_keyboard()
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Çüõí\n–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞, –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Äüì≤", reply_markup=keyboard,
                         parse_mode='Markdown')




########################################################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ú–µ–Ω–µ–¥–∂–µ—Ä' (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è adminy)
@dp.callback_query_handler(lambda query: query.data == 'manager')
async def contact_manager_handler(query: types.CallbackQuery):
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
    await query.message.edit_reply_markup(reply_markup=None)



    # –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É '–æ—Ç–º–µ–Ω–∏—Ç—å'
    cancel_keyboard = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    cancel_keyboard.add(cancel_button)

    await bot.send_message(query.from_user.id, "üñä–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
                           reply_markup=cancel_keyboard)
    await YourStateMachine.waiting_for_manager_message.set()
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)


@dp.message_handler(state=YourStateMachine.waiting_for_manager_message)
async def process_manager_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = message.text

    admin_id = Admins.admin_id
    admin_message = (f"Username‚û°Ô∏è`{message.from_user.username}`\n(ID:*{message.from_user.id}*)\n"
                     f"*{message.from_user.first_name} {message.from_user.last_name}*:\n\n{message.text}")

    await bot.send_message(admin_id, f'{admin_message}\n\nüü•üü•üü•üü•üü•üü•üü•üü•üü•üü•', parse_mode='Markdown')
    keyboard = await create_keyboard()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Éüì®\n‚è≥–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞‚è≥", reply_markup=keyboard)
    await state.finish()



########################################################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?'
@dp.callback_query_handler(lambda query: query.data == 'promo')
async def handle_promo_button(query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    await asyncio.sleep(2) # –ó–∞–º–µ–¥–ª—è—é –ø—Ä–æ–≥—Ä–∞–º–º—É, —á—Ç–æ –±—ã –Ω–µ –±–∞–ª–æ–≤–∞–ª–∏—Å—å —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π
    user_id = query.from_user.id
    keyboard = await create_keyboard() # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await bot.send_message(chat_id=user_id,
                           text=f'–ú—ã –ø—Ä–æ–º–æ-–∫–æ–¥—ã –µ—â—ë –Ω–µ –≤—ã–ø—É—Å–∫–∞–ª–∏! –ß—Ç–æ —Ç—ã –±–∞–ª—É–µ—à—å—Å—è? ü§™\n\nüîô *–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...* üîô'
                                f'\nüè†*–í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ*üè†\n*–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞*'
                                f'\nüëá *–Ω–∞–∂–º–∏—Ç–µ –Ω–∞* üëá\nüõí üõí *KATA–õO–ì* üõí üõí',
                           reply_markup=keyboard, parse_mode='Markdown')



########################################################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–æ—Ç–º–µ–Ω–∏—Ç—å'
# @dp.callback_query_handler(lambda query: query.data == 'cancel', state=YourStateMachine.waiting_for_message)
@dp.callback_query_handler(lambda query: query.data == 'cancel', state=YourStateMachine.waiting_for_message)
@dp.callback_query_handler(lambda query: query.data == 'cancel', state=YourStateMachine.awaiting_promo_code)
@dp.callback_query_handler(lambda query: query.data == 'cancel', state=YourStateMachine.waiting_for_manager_message)
async def cancel_order(query: types.CallbackQuery, state: FSMContext):


    await bot.send_message(query.from_user.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await handle_main_menu_button(query)
########################################################################################################################

# @dp.callback_query_handler(lambda query: query.data == 'promo')
# async def handle_promo_button(query: types.CallbackQuery):
#     # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
#     await query.message.edit_reply_markup(reply_markup=None)
#
#     text = '*–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ –∫–æ–¥:*'
#     await bot.send_message(chat_id=query.from_user.id, text=text, parse_mode='Markdown')
#     # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     # await dp.bot.send_message(chat_id=query.from_user.id, text='–ö–Ω–æ–ø–∫–∞ promo –∞–∫—Ç–∏–≤–Ω–∞')
#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ –∫–æ–¥–∞
#     await YourStateMachine.awaiting_promo_code.set()
#
#
# #############
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @dp.message_handler(state=YourStateMachine.awaiting_promo_code)
# async def handle_text(message: types.Message, state: FSMContext):
#     user_text = message.text
#     user_id = message.from_user.id
#     keyboard = await create_keyboard() # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
#
#     # !! –ó–î–ï–°–¨ –ù–ê–ü–ò–°–ê–¢–¨ –î–ï–ô–°–¢–í–ò–Ø –ü–û –ü–†–û–ú–û-–ö–û–î–£
#     # * –ü–†–û–í–ï–†–ö–ê –í –ë–î –ù–ê –ù–ê–õ–ò–ß–ò–ï –ü–†–û–ú–û–ö–û–î–ê
#     # * –û–¢–í–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ –ù–ê –ü–†–û–ú–û-–ö–û–î
#     # * –ü–ï–†–ï–°–ß–Å–¢ –í–°–ï–• –¶–ï–ù –û–¢–¢–ê–õ–ö–ò–í–ê–Ø–°–¨ –û–¢ –ü–†–û–ú–û –ö–û–î–ê
#
#     # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ –∫–æ–¥–∞
#     await bot.send_message(chat_id=user_id,
#                            text=f'*–í–ê–® –ü–†–û–ú–û-–ö–û–î‚û°Ô∏è*  _{user_text}_\n\nüîô *–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...* üîô\nüè†*–í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ*üè†\n*–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞*\n'
#                                 f'üëá *–Ω–∞–∂–∏–º–∏ –Ω–∞* üëá\nüõí üõí KATA–õO–ì üõí üõí',
#                            reply_markup=keyboard, parse_mode='Markdown')
#
#     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     await state.finish()


########################################################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_text(message: types.Message):
    user_id = message.from_user.id
    # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await bot.send_message(chat_id=user_id, text='–ü–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —è –í–∞—Å —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ—à—É üôÖüèΩ'
                                                 '\n–¢–æ—Ä–º–æ–∂—É –±–æ—Ç–∞ –Ω–∞ 3 —Å–µ–∫ üê¢'
                                                 '\n–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑-–ø–æ—Å—Ç–∞–≤–ª—é –≤ —É–≥–æ–ª üôá')
    await asyncio.sleep(3) # –ó–∞–º–µ–¥–ª—è—é –ø—Ä–æ–≥—Ä–∞–º–º—É, —á—Ç–æ –±—ã –Ω–µ –±–∞–ª–æ–≤–∞–ª–∏—Å—å —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π



########################################################################################################################
# –ö–Ω–æ–ø–∫–∞ '–û—Ç–∑—ã–≤—ã'
@dp.callback_query_handler(lambda query: query.data == 'reviews')
async def handle_reviews_button(query: types.CallbackQuery):
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
    await query.message.edit_reply_markup(reply_markup=None)
    keyboard = await create_keyboard()
    text = f'https://t.me/+8dayy7BPUZ4xYjVi'
    await query.message.answer(text, parse_mode='Markdown', reply_markup=keyboard)



########################################################################################################################
# –ö–Ω–æ–ø–∫–∞ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
@dp.callback_query_handler(lambda query: query.data == 'info')
async def handle_info_button(query: types.CallbackQuery):
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
    await query.message.edit_reply_markup(reply_markup=None)
    keyboard = await create_keyboard()
    text = 'https://t.me/+SBzb11TDgnNlMjRi'
    await query.message.answer(text, reply_markup=keyboard, parse_mode='Markdown')



########################################################################################################################
# –ö–Ω–æ–ø–∫–∞ '–ö–∞—Ç–∞–ª–æ–≥'
@dp.callback_query_handler(lambda query: query.data == 'catalog')
async def handle_catalog_button(query: types.CallbackQuery):

    global abs_path
    folders = os.listdir(abs_path)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∞–ø–æ–∫

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
    await query.message.edit_reply_markup(reply_markup=None)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

    keyboard = types.InlineKeyboardMarkup()
    for folder in folders:
        callback_data = f'gender_{folder}'
        keyboard.row(types.InlineKeyboardButton(text=folder, callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©Ô∏è', callback_data='main_menu'))
    await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:üëá', reply_markup=keyboard)



########################################################################################################################
# –ö–Ω–æ–ø–∫–∏ –ø–∞–ø–æ–∫ (—É–∂–µ –Ω–∞–∂–∞–ª): –ú—É–∂. –ñ–µ–Ω. –î–µ—Ç.
@dp.callback_query_handler(lambda query: query.data.startswith('gender_'))
async def handle_folder_selection(query: types.CallbackQuery):

    global abs_path
    user_data = query.data # gender_–ò–ø—è–ü–∞–ø–∫–∏

    path = user_data.split('_') # —Ä–∞–∑–¥–µ–ª—è—é –¥–∞–Ω–Ω—ã–µ –ø–æ _ , —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ (–ú—É–∂. –ñ–µ–Ω. –î–µ—Ç.)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    # folders = Check_dir.get_folders(f'/home/user/Pictures/123/{path[1]}')
    folders = os.listdir(f'{abs_path}/{path[1]}') # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–æ–π (–ú,–ñ,–î)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    # # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
    # await query.message.edit_reply_markup(reply_markup=None)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = []

    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ –≤ —Å–ø–∏—Å–∫–µ –ø–∞–ø–æ–∫
    for folder in folders:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ
        folder_path = os.path.join(f'{abs_path}{path[1]}/', folder)
        #
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        file_count = len(os.listdir(folder_path))
        if file_count != 0:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ: –∏–º—è –ø–∞–ø–∫–∏ –∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤)
            button_text = f"{folder} ({file_count})"
            data_text = f'{path[1]}/{folder}'
            # print(data_text)
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —É–∫–∞–∑–∞–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (callback_data) –∫–∞–∫ –∏–º—è –ø–∞–ø–∫–∏
            buttons.append(types.InlineKeyboardButton(text=button_text, callback_data=data_text))

    back_to_catalog_menu = types.InlineKeyboardButton(text='‚§µÔ∏èK–∞—Ç–∞–ª–æ–≥‚§µÔ∏è', callback_data='catalog')
    back_to_main_menu = types.InlineKeyboardButton(text='‚Ü©Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©Ô∏è', callback_data='main_menu')
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(*buttons)
    keyboard.add(back_to_catalog_menu)
    keyboard.add(back_to_main_menu)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:üëá" –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:üëá', reply_markup=keyboard)


###
########################################################################################################################
# –ö–Ω–æ–ø–∫–∞ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
@dp.callback_query_handler(lambda query: query.data == 'main_menu')
async def handle_main_menu_button(query: types.CallbackQuery):
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
    await query.message.edit_reply_markup(reply_markup=None)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

    keyboard = await create_keyboard()
    await query.message.answer('üè†*–í–´ –í –ì–õ–ê–í–ù–û–ú –ú–ï–ù–Æ*üè†\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞\nüëá    *–Ω–∞–∂–º–∏—Ç–µ –Ω–∞*    üëá\n'
                               'üõí üõí *KATA–õO–ì* üõí üõí', reply_markup=keyboard, parse_mode='Markdown')



########################################################################################################################
########################################################################################################################
########################################################################################################################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞
# async def auto_reset_state():
#     while True:
#         await asyncio.sleep(30)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
#         await reset_state(state)

########################################################################################################################
########################################################################################################################
########################################################################################################################
# –ö–Ω–æ–ø–∫–∏ '‚óÄÔ∏è –ø—Ä–µ–¥—ã–¥—É—â–∞—è', '‚ñ∂Ô∏è —Å–ª–µ–¥—É—é—â–∞—è'
@dp.callback_query_handler(lambda query: query.data.startswith(('next_', 'prev_')))
async def handle_next_previous_photo(query: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –∏–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback'–∞
    data_parts = query.data.split('_')
    selected_folder = data_parts[1] # –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–µ–Ω–¥–µ—Ä (–ú,–ñ,–î) / –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å —Ñ–æ—Ç–∫–∞–º–∏
    # print(selected_folder)
    photo_index = int(data_parts[2]) # –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    # print(photo_index)
    max_index = int(data_parts[3]) # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    # print(max_index)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–∞–Ω–Ω—ã—Ö callback'–∞
    is_next = query.data.startswith('next_')

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–π –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    next_photo_index = photo_index + 1 if is_next else photo_index - 1

    global abs_path
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    folder_path = os.path.join(abs_path, selected_folder)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    files = os.listdir(folder_path)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo_files = [f for f in files if os.path.isfile(os.path.join(folder_path, f)) and f.lower().endswith(
        ('.jpg', '.jpeg', '.png', '.gif'))]

    if photo_files and 0 <= next_photo_index <= max_index:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞
        next_photo = photo_files[next_photo_index]
        print('next_photo', next_photo)
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
        await query.message.edit_reply_markup(reply_markup=None)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        buttons = []
        buttons.append(types.InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                                  callback_data=f'prev_{selected_folder}_{next_photo_index}_{max_index}'))
        buttons.append(
            types.InlineKeyboardButton(text='‚û°Ô∏è',
                                       callback_data=f'next_{selected_folder}_{next_photo_index}_{max_index}'))
        button_order = (types.InlineKeyboardButton(text='üõí–ó–∞–∫–∞–∑–∞—Ç—åüõí', callback_data='order'))
        button_catalog = (types.InlineKeyboardButton(text='‚§µÔ∏è–ö–∞—Ç–∞–ª–æ–≥‚§µÔ∏è', callback_data='catalog'))
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        keyboard.add(button_order)
        keyboard.add(button_catalog)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        path = os.path.join(folder_path, next_photo)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Ä–µ–∂–∏–º–µ —á—Ç–µ–Ω–∏—è
        with open(path, 'rb') as next_photo_file:

            parts = path.split('/')
            filename = parts[-1]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ '/'
            name_of_model = filename.split('.')[0].lower()  # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            global abs_path_database_data
            print(name_of_model)
            text = await Data_base_models.data_base_models(abs_path_database_data, name_of_model) # –ü–æ–ª—É—á–∞—é –º–æ–¥–µ–ª—å, —Ä–∞–∑–º–µ—Ä—ã, —Ü–µ–Ω—É

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.answer_photo(photo=next_photo_file, caption=text, reply_markup=keyboard)
    else:
        if is_next:
            await query.message.answer('–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞\n–°–º–æ—Ç—Ä–∏—Ç–µ ‚óÄÔ∏è*–ø—Ä–µ–¥—ã–¥—É—â–∏–µ* –º–æ–¥–µ–ª–∏',
                                       parse_mode='Markdown')

        else:
            await query.message.answer('–≠—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞\n–°–º–æ—Ç—Ä–∏—Ç–µ *—Å–ª–µ–¥—É—é—â–∏–µ*‚ñ∂Ô∏è –º–æ–¥–µ–ª–∏',
                                       parse_mode='Markdown')


########################################################################################################################
@dp.callback_query_handler()
async def handle_callback_query(query: types.CallbackQuery):
    selected_folder = query.data # –¢–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∫–Ω–æ–ø–∫–∞)
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º –∫–≤–∞–¥—Ä–∞—Ç–µ (–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —Å–≤–µ—Ä—Ö—É, –≤ –∫–æ–º–ø–µ - –ø–æ —Å–µ—Ä–µ–¥–∏–Ω–µ) —ç–∫—Ä–∞–Ω–∞ –∏ –∏—Å—á–µ–∑–∞–µ—Ç
    # await query.answer(f"–ë–†–ï–ù–î: {selected_folder}") # –ß–µ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—á–∫–∞ –≤–≤–µ—Ä—Ö—É, –∫–æ–≥–¥–∞ —é–∑–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—Ä–µ–Ω–¥: {selected_folder}")
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (reply_markup=None)
    await query.message.edit_reply_markup(reply_markup=None)
    global abs_path
    folder_path = os.path.join(abs_path, selected_folder) # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ —Å —Ñ–æ—Ç–æ
    files = os.listdir(folder_path) # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ (–±—Ä–µ–Ω–¥–∞) —Å —Ñ–æ—Ç–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏
    photo_files = [f for f in files if os.path.isfile(os.path.join(folder_path, f)) and f.lower().endswith(('.jpg', '.jpeg', '.png', '.gif'))]
    photo_index = len(photo_files)    # –°–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ (—Ñ–æ—Ç–æ–∫)
    max_index = photo_index - 1     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–∑–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è) –≤ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ (—Ñ–æ—Ç–∫–∞–º–∏)

    first_photo_index = 0
    #print(photo_index)
    if photo_files:
        photo = photo_files[first_photo_index]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ: —Ä–∞–∑–º–µ—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—É–≤–∏. (str)

        path = os.path.join(folder_path, photo) # –≠—Ç–æ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–æ—Ç–æ
        with open(path, 'rb') as photo_file: # –ú—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ open(), —É–∫–∞–∑—ã–≤–∞—è —Ä–µ–∂–∏–º —á—Ç–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ ('rb'),
            # –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –æ–±—ä–µ–∫—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é photo_file. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.

            parts = path.split('/')
            filename = parts[-1]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ '/'
            name_of_model = filename.split('.')[0].lower()  # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            global abs_path_database_data
            print(name_of_model)
            text = await Data_base_models.data_base_models(abs_path_database_data, name_of_model)

            buttons = []
            if photo_index == 0:
                button_order = (types.InlineKeyboardButton(text='üõí–ó–∞–∫–∞–∑–∞—Ç—åüõí', callback_data='order'))
                button_catalog = (types.InlineKeyboardButton(text='‚§µÔ∏è–ö–∞—Ç–∞–ª–æ–≥‚§µÔ∏è', callback_data='catalog'))
            else:
                #_{index}_{max_index}
                buttons.append(types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'prev_{selected_folder}_{first_photo_index}_{max_index}'))
                buttons.append(types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'next_{selected_folder}_{first_photo_index}_{max_index}'))
                button_order = (types.InlineKeyboardButton(text='üõí–ó–∞–∫–∞–∑–∞—Ç—åüõí', callback_data='order'))
                button_catalog = (types.InlineKeyboardButton(text='‚§µÔ∏è–ö–∞—Ç–∞–ª–æ–≥‚§µÔ∏è', callback_data='catalog'))
            if buttons:
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(*buttons)
            keyboard.add(button_order)
            keyboard.add(button_catalog)

            await query.message.answer_photo(photo=photo_file, caption=text, reply_markup=keyboard)

###
########################################################################################################################
########################################################################################################################
########################################################################################################################

if __name__ == '__main__':
    while True:

        loop = asyncio.get_event_loop()
        try:
            loop.create_task(dp.start_polling())
            loop.run_forever()

        except Exception as e:
            current_datetime = datetime.datetime.now().strftime('%d.%m.%Y/%H:%M')
            error_message = f'({current_datetime}) Error: {str(e)}'
            with open('errors.log', 'a+') as error_log:
                error_log.write(error_message + '\n')

        finally:
            loop.close()


